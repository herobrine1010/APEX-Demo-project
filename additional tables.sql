--采退
CREATE TABLE T_PURCHASE_BACK
(	ID NUMBER(10,0) NOT NULL,
	PURCHASE_ID NUMBER(10,0) NOT NULL,
	SUPPLIER_ID NUMBER(10,0) NOT NULL,
	BUYER_ID NUMBER(10,0) NOT NULL,
	PURCHASE_BACK_DATE DATE NOT NULL,
	APPROVAL_STATUS NUMBER(10,0) NOT NULL,
	SUPPLY_STATUS NUMBER(10,0) NOT NULL,
	DEAD_LINE DATE NOT NULL,
	DELIVERY_ADDRESS VARCHAR2(100),
	REMARK VARCHAR2(200),
	PRIMARY KEY(ID)
);
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."ID" IS '采退单编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."PURCHASE_ID" IS '采购单编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."SUPPLIER_ID" IS '供应商编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."BUYER_ID" IS '采购员编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."PURCHASE_BACK_DATE" IS '采退日期';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."APPROVAL_STATUS" IS '审批状态，0：新建，1：审批通过，2：审批拒绝';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."SUPPLY_STATUS" IS '退货状态，0：未出库，1：部分出库，2：全部出库';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."DEAD_LINE" IS '退货日期';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."DELIVERY_ADDRESS" IS '退货地址';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK"."REMARK" IS '备注';
COMMENT ON TABLE "INVENTORY"."T_PURCHASE_BACK"  IS '采退单表';

CREATE TABLE T_PURCHASE_BACK_DETAILS
(	ID NUMBER(10,0) NOT NULL,
	PURCHASE_BACK_ID NUMBER(10,0) NOT NULL,
	PRODUCT_ID NUMBER(10,0) NOT NULL,
	PRICE NUMBER(38,2) NOT NULL,
	AMOUNT NUMBER(10,0) NOT NULL,
	OUT_AMOUNT NUMBER(10,0),
	REMARK VARCHAR2(200),
	PRIMARY KEY(ID,PURCHASE_BACK_ID)
);
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."ID" IS '采退明细单编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."PURCHASE_BACK_ID" IS '采退单编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."PRICE" IS '价格';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."AMOUNT" IS '数量';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."OUT_AMOUNT" IS '已出库数量';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_DETAILS"."REMARK" IS '备注';
COMMENT ON TABLE "INVENTORY"."T_PURCHASE_BACK_DETAILS"  IS '采退明细单表';

CREATE TABLE T_PURCHASE_BACK_OUT
(	ID NUMBER(10,0) NOT NULL,
	PURCHASE_BACK_ID NUMBER(10,0) NOT NULL,
	EMPLOYEE_ID NUMBER(10,0) NOT NULL,
	OUT_DATE DATE NOT NULL,
	SUPPLIER VARCHAR2(20),
	REMARK VARCHAR2(200),
	PRIMARY KEY(ID)
);
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT"."ID" IS '采退入库单编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT"."PURCHASE_BACK_ID" IS '采退单编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT"."EMPLOYEE_ID" IS '仓管员编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT"."OUT_DATE" IS '出库时间';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT"."SUPPLIER" IS '收货人';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT"."REMARK" IS '备注';
COMMENT ON TABLE "INVENTORY"."T_PURCHASE_BACK_OUT"  IS '采退出库单表';

CREATE TABLE T_PURCHASE_BACK_OUT_DETAILS
(	ID NUMBER(10,0) NOT NULL,
	PURCHASE_BACK_OUT_ID NUMBER(10,0) NOT NULL,
	PRODUCT_ID NUMBER(10,0),
	AMOUNT NUMBER(10,0),
	PRIMARY KEY(ID,PURCHASE_OUT_ID)
);
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT_DETAILS"."ID" IS '采退出库明细单号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT_DETAILS"."PURCHASE_OUT_ID" IS '采退出库单号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "INVENTORY"."T_PURCHASE_BACK_OUT_DETAILS"."AMOUNT" IS '数量';
COMMENT ON TABLE "INVENTORY"."T_PURCHASE_BACK_OUT_DETAILS"  IS '采退出库明细单表';


--销退
CREATE TABLE T_SALES_BACK
(	ID NUMBER(10,0) NOT NULL,
	SALES_ID NUMBER(10,0) NOT NULL,
	CUSTOMER_ID NUMBER(10,0) NOT NULL,
	SELLER_ID NUMBER(10,0) NOT NULL,
	SELL_BACK_DATE DATE,
	STATUS NUMBER(10,0),
	REMARK VARCHAR2(200),
	PRIMARY KEY(ID)
);
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."ID" IS '销退单编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."SALES_ID" IS '销售单编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."CUSTOMER_ID" IS '客户编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."SELLER_ID" IS '销售员编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."SELL_BACK_DATE" IS '销退日期';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."STATUS" IS '状态，0：未入库，1：部分入库，2：全部入库';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK"."REMARK" IS '备注';
COMMENT ON TABLE "INVENTORY"."T_SALES_BACK"  IS '销退单表';

CREATE TABLE T_SALES_BACK_DETAILS
(	ID NUMBER(10,0) NOT NULL,
	SALES_BACK_ID NUMBER(10,0) NOT NULL,
	PRODUCT_ID NUMBER(10,0) NOT NULL,
	PRICE NUMBER(38,2) NOT NULL,
	AMOUNT NUMBER(10,0) NOT NULL,
	IN_AMOUNT NUMBER(10,0),
	PRIMARY KEY(ID,SALES_BACK_ID)
);
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_DETAILS"."ID" IS '销退明细单号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_DETAILS"."SALES_BACK_ID" IS '销退单编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_DETAILS"."PRICE" IS '单价';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_DETAILS"."AMOUNT" IS '数量';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_DETAILS"."IN_AMOUNT" IS '入库数量';
COMMENT ON TABLE "INVENTORY"."T_SALES_BACK_DETAILS"  IS '销退明细单表';

CREATE TABLE T_SALES_BACK_IN
(	ID NUMBER(10,0) NOT NULL,
	SALES_BACK_ID NUMBER(10,0) NOT NULL,
	EMPLOYEE_ID NUMBER(10,0) NOT NULL,
	LOGISTICS_ID NUMBER(10,0) NOT NULL,
	LOGISTICS_NO VARCHAR2(50) NOT NULL,
	IN_DATE DATE NOT NULL,
	REMARK VARCHAR2(200),
	PRIMARY KEY(ID)
);
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."ID" IS '销退入库单号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."SALES_BACK_ID" IS '销退单编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."EMPLOYEE_ID" IS '仓管员编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."LOGISTICS_ID" IS '物流公司编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."LOGISTICS_NO" IS '物流单号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."IN_DATE" IS '入库日期';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN"."REMARK" IS '备注';
COMMENT ON TABLE "INVENTORY"."T_SALES_BACK_IN"  IS '销退入库单表';

CREATE TABLE T_SALES_BACK_IN_DETAILS
(	ID NUMBER(10,0) NOT NULL,
	SALES_BACK_IN_ID NUMBER(10,0) NOT NULL,
	PRODUCT_ID NUMBER(10,0) NOT NULL,
	AMOUNT NUMBER(10,0)  NOT NULL,
	PRIMARY KEY(ID,SALES_BACK_IN_ID)
);
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN_DETAILS"."ID" IS '销退入库明细单号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN_DETAILS"."SALES_BACK_IN_ID" IS '销退入库单号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "INVENTORY"."T_SALES_BACK_IN_DETAILS"."AMOUNT" IS '数量';
COMMENT ON TABLE "INVENTORY"."T_SALES_BACK_IN_DETAILS"  IS '销退入库明细单表';


--创建主键序列
CREATE SEQUENCE  SEQ_PURCHASE_BACK_DTL_ID  MINVALUE 1 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE  SEQ_SALES_BACK_ID  MINVALUE 1 INCREMENT BY 1 START WITH 33001;
CREATE SEQUENCE  SEQ_SALES_BACK_DTL_ID  MINVALUE 1 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE  SEQ_PURCHASE_BACK_OUT_ID  MINVALUE 1 INCREMENT BY 1 START WITH 43001;
CREATE SEQUENCE  SEQ_PURCHASE_BACK_OUT_DTL_ID  MINVALUE 1 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE  SEQ_SALES_BACK_IN_ID  MINVALUE 1 INCREMENT BY 1 START WITH 44001;
CREATE SEQUENCE  SEQ_SALES_BACK_IN_DTL_ID  MINVALUE 1 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE  SEQ_PURCHASE_BACK_ID  MINVALUE 1 INCREMENT BY 1 START WITH 24001;


--创建主键触发器
--采退
CREATE OR REPLACE TRIGGER TRIG_PURCHASE_BACK_ID BEFORE INSERT OR UPDATE ON T_PURCHASE_BACK
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_PURCHASE_BACK_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_PURCHASE_BACK;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_PURCHASE_BACK_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_PURCHASE_BACK_ID ENABLE;
--采退明细
CREATE OR REPLACE TRIGGER TRIG_PURCHASE_BACK_DTL_ID BEFORE INSERT OR UPDATE ON T_PURCHASE_BACK_DETAILS
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_PURCHASE_BACK_DTL_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_PURCHASE_BACK_DETAILS;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_PURCHASE_BACK_DTL_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_PURCHASE_BACK_DTL_ID ENABLE;
--采退出库
CREATE OR REPLACE TRIGGER TRIG_PURCHASE_BACK_OUT_ID BEFORE INSERT OR UPDATE ON T_PURCHASE_BACK_OUT
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_PURCHASE_BACK_OUT_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_PURCHASE_BACK_OUT;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_PURCHASE_BACK_OUT_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_PURCHASE_BACK_OUT_ID ENABLE;
--采退出库明细
CREATE OR REPLACE TRIGGER TRIG_PURCHASE_BACK_OUT_DTL_ID BEFORE INSERT OR UPDATE ON T_PURCHASE_BACK_OUT_DETAILS
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_PURCHASE_BACK_OUT_DTL_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_PURCHASE_BACK_OUT_DETAILS;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_PURCHASE_BACK_OUT_DTL_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_PURCHASE_BACK_OUT_DTL_ID ENABLE;
--销退
CREATE OR REPLACE TRIGGER TRIG_SALES_BACK_ID BEFORE INSERT OR UPDATE ON T_SALES_BACK
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_SALES_BACK_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_SALES_BACK;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_SALES_BACK_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_SALES_BACK_ID ENABLE;
--销退明细
CREATE OR REPLACE TRIGGER TRIG_SALES_BACK_DTL_ID BEFORE INSERT OR UPDATE ON T_SALES_BACK_DETAILS
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_SALES_BACK_DTL_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_SALES_BACK_DETAILS;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_SALES_BACK_DTL_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_SALES_BACK_DTL_ID ENABLE;
--销退入库
CREATE OR REPLACE TRIGGER TRIG_SALES_BACK_IN_ID BEFORE INSERT OR UPDATE ON T_SALES_BACK_IN
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_SALES_BACK_IN_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_SALES_BACK_IN;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_SALES_BACK_IN_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_SALES_BACK_IN_ID ENABLE;
--销退入库明细
CREATE OR REPLACE TRIGGER TRIG_SALES_BACK_IN_DTL_ID BEFORE INSERT OR UPDATE ON T_SALES_BACK_IN_DETAILS
FOR EACH ROW
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  SEQ_SALES_BACK_IN_DTL_ID.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM T_SALES_BACK_IN_DETAILS;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT SEQ_SALES_BACK_IN_DTL_ID.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/
ALTER TRIGGER TRIG_SALES_BACK_IN_DTL_ID ENABLE;



